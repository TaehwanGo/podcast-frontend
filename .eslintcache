[{"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\index.tsx":"1","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\App.tsx":"2","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\reportWebVitals.ts":"3","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\routers\\logged-in-router.tsx":"4","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\routers\\logged-out-router.tsx":"5","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\pages\\login.tsx":"6","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\components\\form-error.tsx":"7","C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\apollo.ts":"8","C:\\github\\podcast-frontend\\src\\index.tsx":"9","C:\\github\\podcast-frontend\\src\\apollo.ts":"10","C:\\github\\podcast-frontend\\src\\components\\form-error.tsx":"11","C:\\github\\podcast-frontend\\src\\pages\\login.tsx":"12","C:\\github\\podcast-frontend\\src\\components\\button.tsx":"13","C:\\github\\podcast-frontend\\src\\reportWebVitals.ts":"14","C:\\github\\podcast-frontend\\src\\routers\\logged-out-router.tsx":"15","C:\\github\\podcast-frontend\\src\\constants.ts":"16","C:\\github\\podcast-frontend\\src\\hooks\\useMe.tsx":"17","C:\\github\\podcast-frontend\\src\\components\\header.tsx":"18","C:\\github\\podcast-frontend\\src\\pages\\create-account.tsx":"19","C:\\github\\podcast-frontend\\src\\pages\\404.tsx":"20","C:\\github\\podcast-frontend\\src\\routers\\logged-in-router.tsx":"21","C:\\github\\podcast-frontend\\src\\pages\\getAllPodcasts.tsx":"22","C:\\github\\podcast-frontend\\src\\pages\\user\\edit-profile.tsx":"23","C:\\github\\podcast-frontend\\src\\fragment.ts":"24","C:\\github\\podcast-frontend\\src\\pages\\getPodcast.tsx":"25","C:\\github\\podcast-frontend\\src\\components\\side-page.tsx":"26","C:\\github\\podcast-frontend\\src\\components\\player.tsx":"27","C:\\github\\podcast-frontend\\src\\components\\App.tsx":"28","C:\\github\\podcast-frontend\\src\\components\\bottom-nav.tsx":"29","C:\\github\\podcast-frontend\\src\\__generated__\\globalTypes.ts":"30"},{"size":654,"mtime":1611647974338,"results":"31","hashOfConfig":"32"},{"size":497,"mtime":1611647709563,"results":"33","hashOfConfig":"32"},{"size":425,"mtime":1611520125186,"results":"34","hashOfConfig":"32"},{"size":288,"mtime":1611647529487,"results":"35","hashOfConfig":"32"},{"size":397,"mtime":1611647803508,"results":"36","hashOfConfig":"32"},{"size":3309,"mtime":1611655947012,"results":"37","hashOfConfig":"32"},{"size":229,"mtime":1611654978718,"results":"38","hashOfConfig":"32"},{"size":781,"mtime":1611655862943,"results":"39","hashOfConfig":"32"},{"size":767,"mtime":1612348653021,"results":"40","hashOfConfig":"41"},{"size":1526,"mtime":1612342098947,"results":"42","hashOfConfig":"41"},{"size":250,"mtime":1612375405376,"results":"43","hashOfConfig":"41"},{"size":3785,"mtime":1612377211606,"results":"44","hashOfConfig":"41"},{"size":508,"mtime":1611913328028,"results":"45","hashOfConfig":"41"},{"size":425,"mtime":1611520125186,"results":"46","hashOfConfig":"41"},{"size":705,"mtime":1611743272847,"results":"47","hashOfConfig":"41"},{"size":230,"mtime":1611737943107,"results":"48","hashOfConfig":"41"},{"size":273,"mtime":1612355499259,"results":"49","hashOfConfig":"41"},{"size":2275,"mtime":1612893213066,"results":"50","hashOfConfig":"41"},{"size":4840,"mtime":1612378730318,"results":"51","hashOfConfig":"41"},{"size":614,"mtime":1612373501868,"results":"52","hashOfConfig":"41"},{"size":1211,"mtime":1612887541330,"results":"53","hashOfConfig":"41"},{"size":4407,"mtime":1612994682891,"results":"54","hashOfConfig":"41"},{"size":3650,"mtime":1612382173934,"results":"55","hashOfConfig":"41"},{"size":183,"mtime":1612195154405,"results":"56","hashOfConfig":"41"},{"size":3900,"mtime":1612904116209,"results":"57","hashOfConfig":"41"},{"size":662,"mtime":1612276665154,"results":"58","hashOfConfig":"41"},{"size":766,"mtime":1612258205841,"results":"59","hashOfConfig":"41"},{"size":500,"mtime":1612348651001,"results":"60","hashOfConfig":"41"},{"size":1603,"mtime":1612894976261,"results":"61","hashOfConfig":"41"},{"size":854,"mtime":1612993761212,"results":"62","hashOfConfig":"41"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"1tgc2yk",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bps31f",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"87"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\index.tsx",[],["132","133"],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\App.tsx",[],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\reportWebVitals.ts",[],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\routers\\logged-in-router.tsx",[],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\routers\\logged-out-router.tsx",[],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\pages\\login.tsx",[],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\components\\form-error.tsx",[],"C:\\github\\uber-eats-challenges\\assignment12-podfornt-login\\src\\apollo.ts",[],"C:\\github\\podcast-frontend\\src\\index.tsx",[],"C:\\github\\podcast-frontend\\src\\apollo.ts",[],["134","135"],"C:\\github\\podcast-frontend\\src\\components\\form-error.tsx",[],["136","137"],"C:\\github\\podcast-frontend\\src\\pages\\login.tsx",["138"],"import { gql, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormError } from '../components/form-error';\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from '../__generated__/loginMutation';\nimport { isLoggedInVar, authToken } from '../apollo';\nimport { AccountButton } from '../components/button';\nimport { EMAIL_REGEX, LOCALSTORAGE_TOKEN } from '../constants';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport { SidePage } from '../components/side-page';\n\ninterface ILoginForm {\n  email: string;\n  password: string;\n}\n\nexport const LOGIN_MUTATION = gql`\n  mutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      token\n      error\n    }\n  }\n`;\n\nexport const Login = () => {\n  const {\n    register,\n    getValues,\n    errors,\n    handleSubmit,\n    formState,\n  } = useForm<ILoginForm>({ mode: 'onChange' }); // 나중에 handleSubmit 제외 하고 test 해보자\n  const onCompleted = (data: loginMutation) => {\n    const {\n      login: { error, ok, token },\n    } = data;\n    if (ok && token) {\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n      authToken(token);\n      isLoggedInVar(true);\n    }\n    // else {\n    //   console.log(error);\n    // }\n  };\n\n  const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n    loginMutation,\n    loginMutationVariables\n  >(LOGIN_MUTATION, { onCompleted });\n\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      loginMutation({\n        // useMutation() hooks로 부터 얻은 mutation function, mutation을 실제로 서버로 전송\n        variables: {\n          loginInput: {\n            email,\n            password,\n          },\n        },\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Helmet>\n        <title>Login | Podcast</title>\n      </Helmet>\n      <div className=\"page-container\">\n        <SidePage />\n        <section className=\"login-mobile-screen\">\n          <h1 className=\"login-h1\">Log in</h1>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"login-form\">\n            <div className=\"login-input-label\">Email</div>\n            <input\n              ref={register({\n                required: 'Email is required',\n                pattern: {\n                  value: EMAIL_REGEX,\n                  message: 'Please enter a valid email',\n                },\n              })}\n              className=\"input\"\n              placeholder=\"Email\"\n              type=\"email\"\n              name=\"email\"\n            />\n            {errors.email?.message && (\n              <FormError errorMessage={errors.email.message} />\n            )}\n            <div className=\"login-input-label\">Password</div>\n            <input\n              ref={register({ required: 'Password is required' })}\n              className=\"input\"\n              placeholder=\"Password\"\n              type=\"password\"\n              name=\"password\"\n            />\n            {errors.password?.message && (\n              <FormError errorMessage={errors.password.message} />\n            )}\n            <AccountButton\n              canClick={formState.isValid}\n              loading={loading}\n              actionText=\"Log in\"\n            />\n            {loginMutationResult?.login.error && (\n              <FormError errorMessage={loginMutationResult.login.error} />\n            )}\n          </form>\n          <div className=\"text-white mt-4\">\n            New to Podcast?{' '}\n            <Link\n              to=\"/create-account\"\n              className=\"text-green-600 hover:underline\"\n            >\n              Create an Account\n            </Link>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n",["139","140"],"C:\\github\\podcast-frontend\\src\\components\\button.tsx",[],["141","142"],"C:\\github\\podcast-frontend\\src\\reportWebVitals.ts",[],"C:\\github\\podcast-frontend\\src\\routers\\logged-out-router.tsx",[],"C:\\github\\podcast-frontend\\src\\constants.ts",[],"C:\\github\\podcast-frontend\\src\\hooks\\useMe.tsx",[],"C:\\github\\podcast-frontend\\src\\components\\header.tsx",["143"],"C:\\github\\podcast-frontend\\src\\pages\\create-account.tsx",[],"C:\\github\\podcast-frontend\\src\\pages\\404.tsx",[],"C:\\github\\podcast-frontend\\src\\routers\\logged-in-router.tsx",[],"C:\\github\\podcast-frontend\\src\\pages\\getAllPodcasts.tsx",["144"],"C:\\github\\podcast-frontend\\src\\pages\\user\\edit-profile.tsx",["145"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { AccountButton } from '../../components/button';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  editProfile,\n  editProfileVariables,\n} from '../../__generated__/editProfile';\nimport { EMAIL_REGEX } from '../../constants';\nimport { SidePage } from '../../components/side-page';\nimport { FormError } from '../../components/form-error';\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nexport const EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const EditProfile = () => {\n  const { data: userData, refetch } = useMe();\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IFormProps>({\n    defaultValues: {\n      email: userData?.me.email,\n    },\n    mode: 'onChange',\n  });\n  const client = useApolloClient();\n  const onCompleted = async (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      //update cache\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `User:${id}`,\n          fragment: gql`\n            fragment EditedUser on User {\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n          },\n        });\n      }\n      //   await refetch();\n    }\n  };\n  const [editProfile, { loading }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, { onCompleted });\n\n  const onSubmit = () => {\n    // getValues 후 edit profile mutation을 call\n    // 그리고 cache도 update : 나중에 다른 스크린에 필요할 수도 있으므로\n    const { email, password } = getValues();\n    editProfile({\n      variables: {\n        input: {\n          email,\n          ...(password !== '' && { password }), // 아무것도 입력안해서 password에 \"\"들어간 경우 password 항목자체가 없게 해서 \"\"으로 password가 변경되는 것을 막아줌\n        },\n      },\n    });\n  };\n  return (\n    <div>\n      <Helmet>\n        <title>Edit Profile | Podcast</title>\n      </Helmet>\n      <div className=\"page-container\">\n        <SidePage />\n        <section className=\"login-mobile-screen\">\n          <h1 className=\"login-h1\">Edit Profile</h1>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"login-form\">\n            <div className=\"login-input-label\">Email</div>\n            <input\n              ref={register({\n                pattern: {\n                  value: EMAIL_REGEX,\n                  message: 'Please enter a valid email',\n                },\n              })}\n              name=\"email\"\n              className=\"input\"\n              type=\"email\"\n              placeholder=\"Email\"\n            />\n            {errors.email?.message && (\n              <FormError errorMessage={errors.email?.message} />\n            )}\n            <div className=\"login-input-label\">Password</div>\n            <input\n              ref={register}\n              name=\"password\"\n              className=\"input\"\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n            <AccountButton\n              loading={loading}\n              canClick={formState.isValid}\n              actionText=\"Save Profile\"\n            />\n          </form>\n        </section>\n      </div>\n    </div>\n  );\n};\n",["146","147"],"C:\\github\\podcast-frontend\\src\\fragment.ts",[],"C:\\github\\podcast-frontend\\src\\pages\\getPodcast.tsx",["148","149","150"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  faGlobeAsia,\n  faPlus,\n  faShareAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link, useParams } from 'react-router-dom';\nimport { SidePage } from '../components/side-page';\nimport { Player } from '../components/player';\nimport { PODCAST_FRAGMENT } from '../fragment';\nimport {\n  getPodcastQuery,\n  getPodcastQueryVariables,\n} from '../__generated__/getPodcastQuery';\n\nexport const PODCAST_QUERY = gql`\n  query getPodcastQuery($input: PodcastSearchInput!) {\n    getPodcast(input: $input) {\n      ok\n      error\n      podcast {\n        id\n        title\n        thumbnailImg\n        creator {\n          id\n          email\n          nickName\n          role\n        }\n        description\n        category {\n          name\n        }\n        episodes {\n          id\n          createdAt\n          title\n          description\n          fileURL\n        }\n      }\n    }\n  }\n`;\n// ...PodcastParts\n// ${PODCAST_FRAGMENT}\ninterface IPodcastParams {\n  id: string;\n}\n\nexport const GetPodcast = () => {\n  const params = useParams<IPodcastParams>();\n  const { data, loading } = useQuery<getPodcastQuery, getPodcastQueryVariables>(\n    PODCAST_QUERY,\n    {\n      variables: {\n        input: {\n          id: +params.id,\n        },\n      },\n    },\n  );\n  console.log(data);\n  return (\n    <div>\n      <Helmet>\n        <title>Podcast | Podcast</title>\n      </Helmet>\n      <div className=\"page-container\">\n        <SidePage />\n        <section className=\"border-b-2 border-gray-400 sm:border-none app-page\">\n          {/* {`podcast ${data?.getPodcast.podcast?.title}`} */}\n          <main className=\"py-4 px-5 border-t border-gray-400 sm:border-none\">\n            <header className=\"flex justify-between\">\n              <div>\n                <h1 className=\"text-3xl pr-2\">\n                  {data?.getPodcast.podcast?.title}\n                </h1>\n                <h3 className=\"mt-1 text-green-700\">\n                  {data?.getPodcast.podcast?.creator.nickName\n                    ? data?.getPodcast.podcast?.creator.nickName\n                    : data?.getPodcast.podcast?.creator.email}\n                </h3>\n              </div>\n              <div\n                style={{\n                  backgroundImage: `url(${data?.getPodcast.podcast?.thumbnailImg})`,\n                }}\n                className=\"w-20 h-20 bg-cover bg-center rounded-lg\"\n              ></div>\n            </header>\n            <div className=\"pt-2 mt-2 text-green-600\">\n              <span className=\" pb-1 px-2 rounded-r-full rounded-l-full border border-gray-400 cursor-pointer hover:opacity-80\">\n                <FontAwesomeIcon icon={faPlus} />\n                <span className=\"ml-2 text-white\">Subscribe</span>\n              </span>\n              <span className=\"ml-4 cursor-pointer hover:opacity-80\">\n                <FontAwesomeIcon icon={faGlobeAsia} />\n              </span>\n              <span className=\"ml-4 cursor-pointer hover:opacity-80\">\n                <FontAwesomeIcon icon={faShareAlt} />\n              </span>\n            </div>\n            <p className=\"text-gray-400 mt-4 text-lg\">\n              {data?.getPodcast.podcast?.description}\n            </p>\n          </main>\n          {data?.getPodcast.podcast?.episodes?.map(episode => (\n            <div\n              key={episode.id}\n              className=\"py-4 px-5 border-t border-gray-400 sm:border-none hover:bg-gray-900\"\n            >\n              <span className=\"text-gray-400 text-sm\">\n                {new Date(Date.parse(episode.createdAt)).toLocaleString()}\n              </span>\n              <h2 className=\"text-lg\">{episode.title}</h2>\n              <Player />\n            </div>\n          ))}\n        </section>\n      </div>\n    </div>\n  );\n};\n","C:\\github\\podcast-frontend\\src\\components\\side-page.tsx",[],"C:\\github\\podcast-frontend\\src\\components\\player.tsx",[],"C:\\github\\podcast-frontend\\src\\components\\App.tsx",[],"C:\\github\\podcast-frontend\\src\\components\\bottom-nav.tsx",[],"C:\\github\\podcast-frontend\\src\\__generated__\\globalTypes.ts",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"151","replacedBy":"155"},{"ruleId":"153","replacedBy":"156"},{"ruleId":"151","replacedBy":"157"},{"ruleId":"153","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":41,"column":16,"nodeType":"161","messageId":"162","endLine":41,"endColumn":21},{"ruleId":"151","replacedBy":"163"},{"ruleId":"153","replacedBy":"164"},{"ruleId":"151","replacedBy":"165"},{"ruleId":"153","replacedBy":"166"},{"ruleId":"159","severity":1,"message":"167","line":8,"column":10,"nodeType":"161","messageId":"162","endLine":8,"endColumn":18},{"ruleId":"159","severity":1,"message":"168","line":53,"column":14,"nodeType":"161","messageId":"162","endLine":53,"endColumn":31},{"ruleId":"159","severity":1,"message":"169","line":29,"column":27,"nodeType":"161","messageId":"162","endLine":29,"endColumn":34},{"ruleId":"151","replacedBy":"170"},{"ruleId":"153","replacedBy":"171"},{"ruleId":"159","severity":1,"message":"172","line":10,"column":10,"nodeType":"161","messageId":"162","endLine":10,"endColumn":14},{"ruleId":"159","severity":1,"message":"173","line":13,"column":10,"nodeType":"161","messageId":"162","endLine":13,"endColumn":26},{"ruleId":"159","severity":1,"message":"174","line":57,"column":17,"nodeType":"161","messageId":"162","endLine":57,"endColumn":24},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],["175"],["176"],["175"],["176"],"@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar",["175"],["176"],["175"],["176"],"'ME_QUERY' is defined but never used.","'loadingCategories' is assigned a value but never used.","'refetch' is assigned a value but never used.",["175"],["176"],"'Link' is defined but never used.","'PODCAST_FRAGMENT' is defined but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]